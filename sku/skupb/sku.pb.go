// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sku/skupb/sku.proto

/*
	Package skupb is a generated protocol buffer package.

	It is generated from these files:
		sku/skupb/sku.proto

	It has these top-level messages:
		Empty
		Sku
		Inventory
		PackageDimensions
		NewRequest
		GetRequest
		DeleteRequest
		UpdateRequest
		SkuList
		ListRequest
*/
package skupb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import paymentpb "github.com/synthecypher/digota/payment/paymentpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Inventory_Type int32

const (
	Inventory_Infinite Inventory_Type = 0
	Inventory_Finite   Inventory_Type = 1
)

var Inventory_Type_name = map[int32]string{
	0: "Infinite",
	1: "Finite",
}
var Inventory_Type_value = map[string]int32{
	"Infinite": 0,
	"Finite":   1,
}

func (x Inventory_Type) String() string {
	return proto.EnumName(Inventory_Type_name, int32(x))
}
func (Inventory_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorSku, []int{2, 0} }

type ListRequest_Sort int32

const (
	ListRequest_Natural     ListRequest_Sort = 0
	ListRequest_CreatedDesc ListRequest_Sort = 1
	ListRequest_CreatedAsc  ListRequest_Sort = 2
	ListRequest_UpdatedDesc ListRequest_Sort = 3
	ListRequest_UpdatedAsc  ListRequest_Sort = 4
)

var ListRequest_Sort_name = map[int32]string{
	0: "Natural",
	1: "CreatedDesc",
	2: "CreatedAsc",
	3: "UpdatedDesc",
	4: "UpdatedAsc",
}
var ListRequest_Sort_value = map[string]int32{
	"Natural":     0,
	"CreatedDesc": 1,
	"CreatedAsc":  2,
	"UpdatedDesc": 3,
	"UpdatedAsc":  4,
}

func (x ListRequest_Sort) String() string {
	return proto.EnumName(ListRequest_Sort_name, int32(x))
}
func (ListRequest_Sort) EnumDescriptor() ([]byte, []int) { return fileDescriptorSku, []int{9, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{0} }

type Sku struct {
	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Price             uint64             `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Currency          paymentpb.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty"`
	Active            bool               `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	Parent            string             `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
	Metadata          map[string]string  `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attributes        map[string]string  `protobuf:"bytes,8,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image             string             `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	PackageDimensions *PackageDimensions `protobuf:"bytes,10,opt,name=packageDimensions" json:"packageDimensions,omitempty"`
	Inventory         *Inventory         `protobuf:"bytes,11,opt,name=inventory" json:"inventory,omitempty"`
	Created           int64              `protobuf:"varint,998,opt,name=created,proto3" json:"created,omitempty"`
	Updated           int64              `protobuf:"varint,999,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *Sku) Reset()                    { *m = Sku{} }
func (m *Sku) String() string            { return proto.CompactTextString(m) }
func (*Sku) ProtoMessage()               {}
func (*Sku) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{1} }

func (m *Sku) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Sku) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sku) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Sku) GetCurrency() paymentpb.Currency {
	if m != nil {
		return m.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (m *Sku) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Sku) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Sku) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Sku) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Sku) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Sku) GetPackageDimensions() *PackageDimensions {
	if m != nil {
		return m.PackageDimensions
	}
	return nil
}

func (m *Sku) GetInventory() *Inventory {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *Sku) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Sku) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type Inventory struct {
	Quantity int64          `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty" validate:"omitempty,gte=0"`
	Type     Inventory_Type `protobuf:"varint,2,opt,name=type,proto3,enum=skupb.Inventory_Type" json:"type,omitempty" validate:"omitempty,required,gte=0,lte=1"`
}

func (m *Inventory) Reset()                    { *m = Inventory{} }
func (m *Inventory) String() string            { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()               {}
func (*Inventory) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{2} }

func (m *Inventory) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Inventory) GetType() Inventory_Type {
	if m != nil {
		return m.Type
	}
	return Inventory_Infinite
}

type PackageDimensions struct {
	Height float64 `protobuf:"fixed64,1,opt,name=height,proto3" json:"height,omitempty" validate:"required,gt=0"`
	Length float64 `protobuf:"fixed64,2,opt,name=length,proto3" json:"length,omitempty" validate:"required,gt=0"`
	Weight float64 `protobuf:"fixed64,3,opt,name=weight,proto3" json:"weight,omitempty" validate:"required,gt=0"`
	Width  float64 `protobuf:"fixed64,4,opt,name=width,proto3" json:"width,omitempty" validate:"required,gt=0"`
}

func (m *PackageDimensions) Reset()                    { *m = PackageDimensions{} }
func (m *PackageDimensions) String() string            { return proto.CompactTextString(m) }
func (*PackageDimensions) ProtoMessage()               {}
func (*PackageDimensions) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{3} }

func (m *PackageDimensions) GetHeight() float64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PackageDimensions) GetLength() float64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *PackageDimensions) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PackageDimensions) GetWidth() float64 {
	if m != nil {
		return m.Width
	}
	return 0
}

type NewRequest struct {
	Name              string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"required,gt=0"`
	Currency          paymentpb.Currency `protobuf:"varint,2,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty" validate:"omitempty,required,gte=0,lte=128"`
	Active            bool               `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty" validate:"required"`
	Price             uint64             `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty" validate:"required,gte=0"`
	Parent            string             `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty" validate:"required,uuid4"`
	Metadata          map[string]string  `protobuf:"bytes,6,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image             string             `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty" validate:"url"`
	PackageDimensions *PackageDimensions `protobuf:"bytes,8,opt,name=packageDimensions" json:"packageDimensions,omitempty" validate:"omitempty,dive"`
	Inventory         *Inventory         `protobuf:"bytes,9,opt,name=inventory" json:"inventory,omitempty" validate:"required,dive"`
	Attributes        map[string]string  `protobuf:"bytes,10,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NewRequest) Reset()                    { *m = NewRequest{} }
func (m *NewRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRequest) ProtoMessage()               {}
func (*NewRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{4} }

func (m *NewRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewRequest) GetCurrency() paymentpb.Currency {
	if m != nil {
		return m.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (m *NewRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *NewRequest) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *NewRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *NewRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *NewRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *NewRequest) GetPackageDimensions() *PackageDimensions {
	if m != nil {
		return m.PackageDimensions
	}
	return nil
}

func (m *NewRequest) GetInventory() *Inventory {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *NewRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid4"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{5} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid4"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{6} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateRequest struct {
	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid4"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" validate:"omitempty,gt=0"`
	Currency          paymentpb.Currency `protobuf:"varint,3,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty" validate:"omitempty,required,gte=0,lte=128"`
	Active            bool               `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Price             uint64             `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty" validate:"omitempty,gte=0"`
	Parent            string             `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty" validate:"omitempty,uuid4"`
	Metadata          map[string]string  `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image             string             `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty" validate:"omitempty,url"`
	PackageDimensions *PackageDimensions `protobuf:"bytes,9,opt,name=packageDimensions" json:"packageDimensions,omitempty" validate:"omitempty,dive"`
	Inventory         *Inventory         `protobuf:"bytes,10,opt,name=inventory" json:"inventory,omitempty" validate:"omitempty,dive"`
	Attributes        map[string]string  `protobuf:"bytes,11,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{7} }

func (m *UpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRequest) GetCurrency() paymentpb.Currency {
	if m != nil {
		return m.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (m *UpdateRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *UpdateRequest) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *UpdateRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *UpdateRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UpdateRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *UpdateRequest) GetPackageDimensions() *PackageDimensions {
	if m != nil {
		return m.PackageDimensions
	}
	return nil
}

func (m *UpdateRequest) GetInventory() *Inventory {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *UpdateRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type SkuList struct {
	Orders []*Sku `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
	Total  int32  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *SkuList) Reset()                    { *m = SkuList{} }
func (m *SkuList) String() string            { return proto.CompactTextString(m) }
func (*SkuList) ProtoMessage()               {}
func (*SkuList) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{8} }

func (m *SkuList) GetOrders() []*Sku {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *SkuList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ListRequest struct {
	Page  int64            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" validate:"omitempty,required,gte=0"`
	Limit int64            `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" validate:"omitempty,required,gt=0"`
	Sort  ListRequest_Sort `protobuf:"varint,3,opt,name=sort,proto3,enum=skupb.ListRequest_Sort" json:"sort,omitempty" validate:"omitempty,required,gte=0,lte=4"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{9} }

func (m *ListRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetSort() ListRequest_Sort {
	if m != nil {
		return m.Sort
	}
	return ListRequest_Natural
}

func init() {
	proto.RegisterType((*Empty)(nil), "skupb.Empty")
	proto.RegisterType((*Sku)(nil), "skupb.Sku")
	proto.RegisterType((*Inventory)(nil), "skupb.Inventory")
	proto.RegisterType((*PackageDimensions)(nil), "skupb.PackageDimensions")
	proto.RegisterType((*NewRequest)(nil), "skupb.NewRequest")
	proto.RegisterType((*GetRequest)(nil), "skupb.GetRequest")
	proto.RegisterType((*DeleteRequest)(nil), "skupb.DeleteRequest")
	proto.RegisterType((*UpdateRequest)(nil), "skupb.UpdateRequest")
	proto.RegisterType((*SkuList)(nil), "skupb.SkuList")
	proto.RegisterType((*ListRequest)(nil), "skupb.ListRequest")
	proto.RegisterEnum("skupb.Inventory_Type", Inventory_Type_name, Inventory_Type_value)
	proto.RegisterEnum("skupb.ListRequest_Sort", ListRequest_Sort_name, ListRequest_Sort_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SkuService service

type SkuServiceClient interface {
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Sku, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Sku, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Sku, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*SkuList, error)
}

type skuServiceClient struct {
	cc *grpc.ClientConn
}

func NewSkuServiceClient(cc *grpc.ClientConn) SkuServiceClient {
	return &skuServiceClient{cc}
}

func (c *skuServiceClient) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Sku, error) {
	out := new(Sku)
	err := grpc.Invoke(ctx, "/skupb.SkuService/New", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Sku, error) {
	out := new(Sku)
	err := grpc.Invoke(ctx, "/skupb.SkuService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Sku, error) {
	out := new(Sku)
	err := grpc.Invoke(ctx, "/skupb.SkuService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/skupb.SkuService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*SkuList, error) {
	out := new(SkuList)
	err := grpc.Invoke(ctx, "/skupb.SkuService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SkuService service

type SkuServiceServer interface {
	New(context.Context, *NewRequest) (*Sku, error)
	Get(context.Context, *GetRequest) (*Sku, error)
	Update(context.Context, *UpdateRequest) (*Sku, error)
	Delete(context.Context, *DeleteRequest) (*Empty, error)
	List(context.Context, *ListRequest) (*SkuList, error)
}

func RegisterSkuServiceServer(s *grpc.Server, srv SkuServiceServer) {
	s.RegisterService(&_SkuService_serviceDesc, srv)
}

func _SkuService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.SkuService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServiceServer).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.SkuService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.SkuService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.SkuService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkuService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.SkuService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SkuService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skupb.SkuService",
	HandlerType: (*SkuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _SkuService_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SkuService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SkuService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SkuService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SkuService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sku/skupb/sku.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Sku) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sku) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Price != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Price))
	}
	if m.Currency != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Currency))
	}
	if m.Active {
		dAtA[i] = 0x28
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Parent) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x3a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			i = encodeVarintSku(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Attributes) > 0 {
		for k, _ := range m.Attributes {
			dAtA[i] = 0x42
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			i = encodeVarintSku(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.PackageDimensions != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.PackageDimensions.Size()))
		n1, err := m.PackageDimensions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Inventory != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Inventory.Size()))
		n2, err := m.Inventory.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Created != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Created))
	}
	if m.Updated != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Updated))
	}
	return i, nil
}

func (m *Inventory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inventory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Quantity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Quantity))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *PackageDimensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageDimensions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Sku(dAtA, i, uint64(math.Float64bits(float64(m.Height))))
	}
	if m.Length != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Sku(dAtA, i, uint64(math.Float64bits(float64(m.Length))))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Sku(dAtA, i, uint64(math.Float64bits(float64(m.Weight))))
	}
	if m.Width != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64Sku(dAtA, i, uint64(math.Float64bits(float64(m.Width))))
	}
	return i, nil
}

func (m *NewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Currency != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Currency))
	}
	if m.Active {
		dAtA[i] = 0x18
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Price != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Price))
	}
	if len(m.Parent) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x32
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			i = encodeVarintSku(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.PackageDimensions != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.PackageDimensions.Size()))
		n3, err := m.PackageDimensions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Inventory != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Inventory.Size()))
		n4, err := m.Inventory.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Attributes) > 0 {
		for k, _ := range m.Attributes {
			dAtA[i] = 0x52
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			i = encodeVarintSku(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *UpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Currency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Currency))
	}
	if m.Active {
		dAtA[i] = 0x20
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Price != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Price))
	}
	if len(m.Parent) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x3a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			i = encodeVarintSku(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSku(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.PackageDimensions != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.PackageDimensions.Size()))
		n5, err := m.PackageDimensions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Inventory != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Inventory.Size()))
		n6, err := m.Inventory.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Attributes) > 0 {
		for k, _ := range m.Attributes {
			dAtA[i] = 0x5a
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			i = encodeVarintSku(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSku(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *SkuList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkuList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSku(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Page))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Limit))
	}
	if m.Sort != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSku(dAtA, i, uint64(m.Sort))
	}
	return i, nil
}

func encodeFixed64Sku(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Sku(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSku(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Sku) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovSku(uint64(m.Price))
	}
	if m.Currency != 0 {
		n += 1 + sovSku(uint64(m.Currency))
	}
	if m.Active {
		n += 2
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			n += mapEntrySize + 1 + sovSku(uint64(mapEntrySize))
		}
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			n += mapEntrySize + 1 + sovSku(uint64(mapEntrySize))
		}
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	if m.PackageDimensions != nil {
		l = m.PackageDimensions.Size()
		n += 1 + l + sovSku(uint64(l))
	}
	if m.Inventory != nil {
		l = m.Inventory.Size()
		n += 1 + l + sovSku(uint64(l))
	}
	if m.Created != 0 {
		n += 2 + sovSku(uint64(m.Created))
	}
	if m.Updated != 0 {
		n += 2 + sovSku(uint64(m.Updated))
	}
	return n
}

func (m *Inventory) Size() (n int) {
	var l int
	_ = l
	if m.Quantity != 0 {
		n += 1 + sovSku(uint64(m.Quantity))
	}
	if m.Type != 0 {
		n += 1 + sovSku(uint64(m.Type))
	}
	return n
}

func (m *PackageDimensions) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 9
	}
	if m.Length != 0 {
		n += 9
	}
	if m.Weight != 0 {
		n += 9
	}
	if m.Width != 0 {
		n += 9
	}
	return n
}

func (m *NewRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	if m.Currency != 0 {
		n += 1 + sovSku(uint64(m.Currency))
	}
	if m.Active {
		n += 2
	}
	if m.Price != 0 {
		n += 1 + sovSku(uint64(m.Price))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			n += mapEntrySize + 1 + sovSku(uint64(mapEntrySize))
		}
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	if m.PackageDimensions != nil {
		l = m.PackageDimensions.Size()
		n += 1 + l + sovSku(uint64(l))
	}
	if m.Inventory != nil {
		l = m.Inventory.Size()
		n += 1 + l + sovSku(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			n += mapEntrySize + 1 + sovSku(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	return n
}

func (m *UpdateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	if m.Currency != 0 {
		n += 1 + sovSku(uint64(m.Currency))
	}
	if m.Active {
		n += 2
	}
	if m.Price != 0 {
		n += 1 + sovSku(uint64(m.Price))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			n += mapEntrySize + 1 + sovSku(uint64(mapEntrySize))
		}
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovSku(uint64(l))
	}
	if m.PackageDimensions != nil {
		l = m.PackageDimensions.Size()
		n += 1 + l + sovSku(uint64(l))
	}
	if m.Inventory != nil {
		l = m.Inventory.Size()
		n += 1 + l + sovSku(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSku(uint64(len(k))) + 1 + len(v) + sovSku(uint64(len(v)))
			n += mapEntrySize + 1 + sovSku(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SkuList) Size() (n int) {
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovSku(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSku(uint64(m.Total))
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSku(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovSku(uint64(m.Limit))
	}
	if m.Sort != 0 {
		n += 1 + sovSku(uint64(m.Sort))
	}
	return n
}

func sovSku(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSku(x uint64) (n int) {
	return sovSku(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sku) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sku: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sku: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			m.Currency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currency |= (paymentpb.Currency(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSku
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSku
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Metadata[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Metadata[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSku
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSku
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Attributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Attributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageDimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PackageDimensions == nil {
				m.PackageDimensions = &PackageDimensions{}
			}
			if err := m.PackageDimensions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inventory == nil {
				m.Inventory = &Inventory{}
			}
			if err := m.Inventory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 998:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 999:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inventory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inventory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inventory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Inventory_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageDimensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageDimensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageDimensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Height = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Length = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Weight = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Width = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			m.Currency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currency |= (paymentpb.Currency(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSku
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSku
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Metadata[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Metadata[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageDimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PackageDimensions == nil {
				m.PackageDimensions = &PackageDimensions{}
			}
			if err := m.PackageDimensions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inventory == nil {
				m.Inventory = &Inventory{}
			}
			if err := m.Inventory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSku
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSku
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Attributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Attributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			m.Currency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currency |= (paymentpb.Currency(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSku
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSku
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Metadata[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Metadata[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageDimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PackageDimensions == nil {
				m.PackageDimensions = &PackageDimensions{}
			}
			if err := m.PackageDimensions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inventory == nil {
				m.Inventory = &Inventory{}
			}
			if err := m.Inventory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSku
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSku
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSku
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Attributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Attributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkuList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkuList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkuList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSku
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &Sku{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSku
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSku
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (ListRequest_Sort(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSku(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSku
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSku(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSku
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSku
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSku
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSku
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSku
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSku(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSku = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSku   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sku/skupb/sku.proto", fileDescriptorSku) }

var fileDescriptorSku = []byte{
	// 1194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x8e, 0xda, 0x46,
	0x14, 0x5e, 0x83, 0xf9, 0x3b, 0x24, 0x84, 0x4c, 0xd2, 0xc6, 0x41, 0x2d, 0xd0, 0x69, 0x95, 0x52,
	0x35, 0x81, 0x84, 0xd0, 0x2a, 0xda, 0xed, 0x46, 0x5a, 0x76, 0x93, 0x28, 0x52, 0xb2, 0xaa, 0x4c,
	0x23, 0x55, 0xb9, 0x69, 0x0d, 0x9e, 0xb0, 0x23, 0xc0, 0xf6, 0xda, 0x63, 0x56, 0xbc, 0x49, 0xde,
	0xa5, 0x97, 0x55, 0xa5, 0x5e, 0xf6, 0x09, 0x50, 0xb5, 0x95, 0xfa, 0x73, 0xcb, 0x13, 0x54, 0x33,
	0x63, 0x1b, 0xf3, 0xb7, 0x24, 0x51, 0xab, 0xf6, 0x06, 0x3c, 0x33, 0xe7, 0x3b, 0x67, 0xce, 0x99,
	0xf3, 0x7d, 0x1e, 0xc3, 0x35, 0x6f, 0xe0, 0x37, 0xbc, 0x81, 0xef, 0x74, 0xf9, 0x6f, 0xdd, 0x71,
	0x6d, 0x66, 0xa3, 0x94, 0x98, 0x28, 0xdd, 0xe9, 0x53, 0x76, 0xe2, 0x77, 0xeb, 0x3d, 0x7b, 0xd4,
	0xe8, 0xdb, 0x7d, 0xbb, 0x21, 0x56, 0xbb, 0xfe, 0x2b, 0x31, 0x12, 0x03, 0xf1, 0x24, 0x51, 0xa5,
	0x07, 0x31, 0x73, 0x93, 0xf6, 0x6d, 0x66, 0x84, 0x7f, 0x8e, 0x31, 0x19, 0x11, 0x8b, 0x85, 0xff,
	0x4e, 0x37, 0x7c, 0x92, 0x48, 0x9c, 0x81, 0xd4, 0xa3, 0x91, 0xc3, 0x26, 0xf8, 0x5c, 0x85, 0x64,
	0x67, 0xe0, 0xa3, 0x32, 0x24, 0xa8, 0xa9, 0x29, 0x55, 0xa5, 0x96, 0x6b, 0x17, 0x66, 0xd3, 0x0a,
	0x74, 0x3d, 0xdb, 0xda, 0xc5, 0xdf, 0x51, 0x13, 0xeb, 0x09, 0x6a, 0x22, 0x04, 0xaa, 0x65, 0x8c,
	0x88, 0x96, 0xe0, 0x16, 0xba, 0x78, 0x46, 0xd7, 0x21, 0xe5, 0xb8, 0xb4, 0x47, 0xb4, 0x64, 0x55,
	0xa9, 0xa9, 0xba, 0x1c, 0xa0, 0x06, 0x64, 0x7b, 0xbe, 0xeb, 0x12, 0xab, 0x37, 0xd1, 0xd4, 0xaa,
	0x52, 0x2b, 0x34, 0xaf, 0xd5, 0xa3, 0x6d, 0xd4, 0x0f, 0x83, 0x25, 0x3d, 0x32, 0x42, 0xef, 0x43,
	0xda, 0xe8, 0x31, 0x3a, 0x26, 0x5a, 0xaa, 0xaa, 0xd4, 0xb2, 0x7a, 0x30, 0xe2, 0xf3, 0x8e, 0xe1,
	0x12, 0x8b, 0x69, 0x69, 0x11, 0x34, 0x18, 0xa1, 0x16, 0x64, 0x47, 0x84, 0x19, 0xa6, 0xc1, 0x0c,
	0x2d, 0x53, 0x4d, 0xd6, 0xf2, 0x4d, 0xad, 0x2e, 0xca, 0x57, 0xef, 0x0c, 0xfc, 0xfa, 0xf3, 0x60,
	0xe9, 0x91, 0xc5, 0xdc, 0x89, 0x1e, 0x59, 0xa2, 0x5d, 0x00, 0x83, 0x31, 0x97, 0x76, 0x7d, 0x46,
	0x3c, 0x2d, 0x2b, 0x70, 0xa5, 0x18, 0xee, 0x20, 0x5a, 0x94, 0xc8, 0x98, 0x35, 0x4f, 0x94, 0x8e,
	0x8c, 0x3e, 0xd1, 0x72, 0x62, 0x23, 0x72, 0x80, 0x1e, 0xc3, 0x55, 0xc7, 0xe8, 0x0d, 0x8c, 0x3e,
	0x39, 0xa2, 0x23, 0x62, 0x79, 0xd4, 0xb6, 0x3c, 0x0d, 0xaa, 0x4a, 0x6c, 0x43, 0x5f, 0x2f, 0xaf,
	0xeb, 0xab, 0x10, 0x54, 0x87, 0x1c, 0xb5, 0xc6, 0xc4, 0x62, 0xb6, 0x3b, 0xd1, 0xf2, 0x02, 0x5f,
	0x0c, 0xf0, 0x4f, 0xc3, 0x79, 0x7d, 0x6e, 0x82, 0x6e, 0x42, 0xa6, 0xe7, 0x12, 0x83, 0x11, 0x53,
	0xfb, 0x3d, 0x53, 0x55, 0x6a, 0x49, 0x3d, 0x1c, 0xf3, 0x25, 0xdf, 0x31, 0xc5, 0xd2, 0x1f, 0xc1,
	0x52, 0x30, 0x2e, 0xed, 0xc1, 0xe5, 0x85, 0xd2, 0xa0, 0x22, 0x24, 0x07, 0x64, 0x22, 0x8f, 0x5c,
	0xe7, 0x8f, 0x3c, 0xcd, 0xb1, 0x31, 0xf4, 0xc3, 0x43, 0x96, 0x83, 0xdd, 0xc4, 0x03, 0xa5, 0xb4,
	0x0f, 0x57, 0x96, 0xea, 0xf3, 0x36, 0x70, 0xfc, 0xa3, 0x02, 0xb9, 0x28, 0x15, 0xb4, 0x0b, 0xd9,
	0x53, 0xdf, 0xb0, 0x18, 0x65, 0x12, 0x9e, 0x6c, 0x97, 0x67, 0xd3, 0x4a, 0x69, 0x6c, 0x0c, 0x29,
	0xdf, 0xea, 0x2e, 0xb6, 0x47, 0x94, 0x11, 0xde, 0x9d, 0xb7, 0xfb, 0x8c, 0xec, 0xdf, 0xc5, 0x7a,
	0x64, 0x8f, 0xbe, 0x05, 0x95, 0x4d, 0x1c, 0x19, 0xa2, 0xd0, 0x7c, 0x6f, 0xb9, 0x4c, 0xf5, 0x6f,
	0x26, 0x0e, 0x69, 0xdf, 0x99, 0x4d, 0x2b, 0x9f, 0xad, 0x73, 0xe7, 0x92, 0x53, 0x9f, 0xba, 0xc4,
	0x94, 0x7e, 0x6f, 0x0f, 0x19, 0xd9, 0xbf, 0x87, 0x75, 0xe1, 0x11, 0x57, 0x41, 0xe5, 0x60, 0x74,
	0x09, 0xb2, 0x4f, 0xad, 0x57, 0xd4, 0xa2, 0x8c, 0x14, 0x77, 0x10, 0x40, 0xfa, 0xb1, 0x7c, 0x56,
	0xf0, 0x5f, 0x0a, 0x5c, 0x5d, 0x39, 0x50, 0xd4, 0x82, 0xf4, 0x09, 0xa1, 0xfd, 0x13, 0x26, 0x72,
	0x51, 0xda, 0x1f, 0xcc, 0xa6, 0x15, 0x6d, 0x1e, 0x3c, 0x16, 0x92, 0x67, 0x12, 0xd8, 0x72, 0xd4,
	0x90, 0x58, 0x7d, 0x76, 0x22, 0x32, 0xd9, 0x8a, 0x92, 0xb6, 0x1c, 0x75, 0x26, 0x63, 0x25, 0xdf,
	0x04, 0x25, 0x6d, 0x51, 0x13, 0x52, 0x67, 0xd4, 0x64, 0x27, 0x82, 0x8d, 0xdb, 0x40, 0xd2, 0x14,
	0xbf, 0x4e, 0x03, 0x1c, 0x93, 0x33, 0x9d, 0x9c, 0xfa, 0xc4, 0x63, 0xe8, 0x6e, 0xc0, 0x7e, 0xa9,
	0x0f, 0x17, 0x7b, 0x90, 0xda, 0xf0, 0x7d, 0x4c, 0x05, 0x12, 0x1b, 0x55, 0xa0, 0xdd, 0x98, 0x4d,
	0x2b, 0x9f, 0xbf, 0xe9, 0x51, 0x35, 0x1f, 0xe0, 0x98, 0x6c, 0x34, 0x22, 0xd9, 0xe0, 0xc5, 0xc8,
	0xb6, 0x6f, 0xcc, 0xa6, 0x95, 0x6b, 0xab, 0xbb, 0xc2, 0x91, 0x9e, 0xdc, 0x0f, 0xe5, 0x8a, 0xd7,
	0x41, 0x6d, 0x7f, 0x38, 0x9b, 0x56, 0x6e, 0xae, 0xcd, 0x42, 0xf4, 0x5c, 0xa0, 0x66, 0x5f, 0x44,
	0x22, 0x94, 0x12, 0xb9, 0x6f, 0x42, 0xf9, 0x3e, 0x35, 0x5b, 0x38, 0xd2, 0xa8, 0xbd, 0x98, 0x46,
	0xa5, 0x85, 0xd6, 0x54, 0x82, 0x5e, 0x9d, 0x57, 0x75, 0xa3, 0x54, 0xd5, 0x42, 0xb9, 0xc9, 0x88,
	0x90, 0x68, 0x36, 0xad, 0x14, 0xe6, 0x21, 0x7d, 0x77, 0x88, 0x43, 0x09, 0x22, 0xeb, 0x24, 0x28,
	0x7b, 0xb1, 0x04, 0x2d, 0xa7, 0x30, 0xaf, 0xb9, 0x49, 0xc7, 0x04, 0xaf, 0x53, 0xa8, 0x67, 0x71,
	0x85, 0xca, 0xad, 0x57, 0xa8, 0x8d, 0x5d, 0x21, 0xbd, 0xc6, 0xf4, 0xeb, 0x60, 0x41, 0x89, 0x41,
	0x54, 0xe7, 0xa3, 0xd5, 0xea, 0x5c, 0x20, 0xc8, 0xff, 0xa9, 0x98, 0xed, 0x01, 0x3c, 0x21, 0x2c,
	0x64, 0xc6, 0x9d, 0xd8, 0x7b, 0x73, 0x4b, 0x6f, 0x24, 0xa8, 0x89, 0x1f, 0xc2, 0xe5, 0x23, 0x32,
	0x24, 0x8c, 0xbc, 0x23, 0xfe, 0xa7, 0x34, 0x5c, 0x7e, 0x21, 0x14, 0xfd, 0xdd, 0x1c, 0xa0, 0x7b,
	0xf1, 0xf7, 0xf8, 0xe6, 0x56, 0xd8, 0x44, 0xe5, 0xe4, 0xbf, 0x42, 0xe5, 0xf9, 0x0d, 0x40, 0x5d,
	0xb8, 0x01, 0xb4, 0x42, 0xc6, 0xa6, 0x04, 0x63, 0xb7, 0xbd, 0x26, 0x02, 0xca, 0x7e, 0xb9, 0x78,
	0x6f, 0xd8, 0x0c, 0x5b, 0xe2, 0xec, 0xc3, 0x95, 0x7b, 0x05, 0x0e, 0xba, 0x72, 0xa1, 0xe2, 0x1b,
	0x69, 0xdb, 0x0c, 0x69, 0x9b, 0x5d, 0xa7, 0x92, 0xb1, 0xb0, 0xdb, 0x08, 0x9c, 0xfb, 0xc7, 0x09,
	0xfc, 0x3c, 0x4e, 0x60, 0xd8, 0x40, 0xe0, 0x2d, 0x6e, 0x63, 0x0c, 0x3e, 0x5a, 0x60, 0x70, 0x5e,
	0xd4, 0xea, 0x93, 0xb5, 0xb5, 0xfa, 0xbf, 0x92, 0xf8, 0x10, 0x32, 0x9d, 0x81, 0xff, 0x8c, 0x7a,
	0x0c, 0x61, 0x48, 0xdb, 0xae, 0x49, 0x5c, 0x4f, 0x53, 0x44, 0x22, 0x30, 0xbf, 0x14, 0xea, 0xc1,
	0x0a, 0x77, 0xc4, 0x6c, 0x66, 0x0c, 0x85, 0xa3, 0x94, 0x2e, 0x07, 0xf8, 0x87, 0x04, 0xe4, 0xb9,
	0x8b, 0x90, 0x8a, 0x7b, 0xa0, 0x3a, 0xfc, 0xfc, 0xe5, 0xa5, 0xe6, 0xd3, 0xd9, 0xb4, 0xf2, 0xf1,
	0x76, 0x3e, 0x60, 0x5d, 0x80, 0xd0, 0x57, 0x90, 0x1a, 0xd2, 0x11, 0x65, 0x22, 0x44, 0xb2, 0x7d,
	0x6b, 0x36, 0xad, 0xe0, 0x2d, 0x68, 0xd1, 0xf3, 0x02, 0x84, 0x5e, 0x82, 0xea, 0xd9, 0x2e, 0x0b,
	0xf8, 0x79, 0x23, 0x48, 0x21, 0xb6, 0xb9, 0x7a, 0xc7, 0x76, 0xd9, 0x5b, 0xdd, 0x8c, 0x5a, 0x58,
	0x17, 0x3e, 0xf1, 0x0b, 0x50, 0x39, 0x18, 0xe5, 0x21, 0x73, 0x6c, 0x30, 0xdf, 0x35, 0x86, 0xc5,
	0x1d, 0x74, 0x05, 0xf2, 0x87, 0xf2, 0xd2, 0x79, 0x44, 0xbc, 0x5e, 0x51, 0x41, 0x05, 0x80, 0x60,
	0xe2, 0xc0, 0xeb, 0x15, 0x13, 0xdc, 0x40, 0xb6, 0x82, 0x34, 0x48, 0x72, 0x83, 0x60, 0x82, 0x1b,
	0xa8, 0xcd, 0x3f, 0x15, 0x80, 0xce, 0xc0, 0xef, 0x10, 0x77, 0xcc, 0x59, 0x7b, 0x0b, 0x92, 0xc7,
	0xe4, 0x0c, 0x5d, 0x5d, 0x79, 0x11, 0x94, 0x62, 0x07, 0x82, 0x77, 0xb8, 0xdd, 0x13, 0xc2, 0x22,
	0xbb, 0xb9, 0x14, 0x2f, 0xd9, 0xdd, 0x86, 0xb4, 0x0c, 0x87, 0xae, 0xaf, 0xeb, 0xcc, 0x25, 0xeb,
	0x3a, 0xa4, 0xa5, 0x2e, 0x47, 0xd6, 0x0b, 0x32, 0x5d, 0xba, 0x14, 0xcc, 0xca, 0x8f, 0x26, 0xee,
	0x5d, 0x15, 0xcd, 0x83, 0x56, 0x2b, 0x5d, 0x2a, 0xcc, 0x3d, 0xf3, 0x69, 0xbc, 0xd3, 0x6e, 0xfd,
	0x7c, 0x5e, 0x56, 0x7e, 0x39, 0x2f, 0x2b, 0xbf, 0x9e, 0x97, 0x95, 0xd7, 0xbf, 0x95, 0x77, 0x5e,
	0xe2, 0x8d, 0x5f, 0x6e, 0xd1, 0xd7, 0x61, 0x37, 0x2d, 0x3e, 0xd5, 0xee, 0xff, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x3a, 0x51, 0xc3, 0xe2, 0x31, 0x0e, 0x00, 0x00,
}
